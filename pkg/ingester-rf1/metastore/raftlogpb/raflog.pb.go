// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/ingester-rf1/metastore/raftlogpb/raflog.proto

package raftlogpb

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CommandType int32

const (
	COMMAND_TYPE_UNKNOWN   CommandType = 0
	COMMAND_TYPE_ADD_BLOCK CommandType = 1
	// This is a temporary solution.
	COMMAND_TYPE_MARK  CommandType = 4195
	COMMAND_TYPE_SWEEP CommandType = 4196
)

var CommandType_name = map[int32]string{
	0:    "COMMAND_TYPE_UNKNOWN",
	1:    "COMMAND_TYPE_ADD_BLOCK",
	4195: "COMMAND_TYPE_MARK",
	4196: "COMMAND_TYPE_SWEEP",
}

var CommandType_value = map[string]int32{
	"COMMAND_TYPE_UNKNOWN":   0,
	"COMMAND_TYPE_ADD_BLOCK": 1,
	"COMMAND_TYPE_MARK":      4195,
	"COMMAND_TYPE_SWEEP":     4196,
}

func (CommandType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dd4a889a2dc1d0a7, []int{0}
}

type RaftLogEntry struct {
	Type    CommandType `protobuf:"varint,1,opt,name=type,proto3,enum=raftlogpb.CommandType" json:"type,omitempty"`
	Payload []byte      `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *RaftLogEntry) Reset()      { *m = RaftLogEntry{} }
func (*RaftLogEntry) ProtoMessage() {}
func (*RaftLogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd4a889a2dc1d0a7, []int{0}
}
func (m *RaftLogEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftLogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftLogEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RaftLogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftLogEntry.Merge(m, src)
}
func (m *RaftLogEntry) XXX_Size() int {
	return m.Size()
}
func (m *RaftLogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftLogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_RaftLogEntry proto.InternalMessageInfo

func (m *RaftLogEntry) GetType() CommandType {
	if m != nil {
		return m.Type
	}
	return COMMAND_TYPE_UNKNOWN
}

func (m *RaftLogEntry) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type MarkCommand struct {
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *MarkCommand) Reset()      { *m = MarkCommand{} }
func (*MarkCommand) ProtoMessage() {}
func (*MarkCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd4a889a2dc1d0a7, []int{1}
}
func (m *MarkCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarkCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarkCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarkCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarkCommand.Merge(m, src)
}
func (m *MarkCommand) XXX_Size() int {
	return m.Size()
}
func (m *MarkCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_MarkCommand.DiscardUnknown(m)
}

var xxx_messageInfo_MarkCommand proto.InternalMessageInfo

func (m *MarkCommand) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type SweepCommand struct {
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *SweepCommand) Reset()      { *m = SweepCommand{} }
func (*SweepCommand) ProtoMessage() {}
func (*SweepCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd4a889a2dc1d0a7, []int{2}
}
func (m *SweepCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SweepCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SweepCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SweepCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SweepCommand.Merge(m, src)
}
func (m *SweepCommand) XXX_Size() int {
	return m.Size()
}
func (m *SweepCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_SweepCommand.DiscardUnknown(m)
}

var xxx_messageInfo_SweepCommand proto.InternalMessageInfo

func (m *SweepCommand) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterEnum("raftlogpb.CommandType", CommandType_name, CommandType_value)
	proto.RegisterType((*RaftLogEntry)(nil), "raftlogpb.RaftLogEntry")
	proto.RegisterType((*MarkCommand)(nil), "raftlogpb.MarkCommand")
	proto.RegisterType((*SweepCommand)(nil), "raftlogpb.SweepCommand")
}

func init() {
	proto.RegisterFile("pkg/ingester-rf1/metastore/raftlogpb/raflog.proto", fileDescriptor_dd4a889a2dc1d0a7)
}

var fileDescriptor_dd4a889a2dc1d0a7 = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xcf, 0x4a, 0x02, 0x51,
	0x14, 0x87, 0xef, 0x0d, 0x29, 0xbc, 0x4a, 0x4c, 0x97, 0xb0, 0x21, 0xe2, 0x30, 0xb8, 0x12, 0x2b,
	0xc5, 0xea, 0x05, 0xfc, 0x33, 0x2b, 0x9d, 0x51, 0x46, 0x43, 0x5a, 0xc9, 0x15, 0xaf, 0x83, 0xe8,
	0x78, 0x2f, 0xd7, 0x0b, 0x31, 0xbb, 0x1e, 0xa1, 0xc7, 0xe8, 0x51, 0x5a, 0xba, 0x74, 0x99, 0x77,
	0x5a, 0xb4, 0xf4, 0x11, 0x22, 0x29, 0xcb, 0x5d, 0xbb, 0x73, 0xbe, 0xdf, 0x77, 0x0e, 0x87, 0x43,
	0x2a, 0x72, 0x1a, 0x96, 0x27, 0xf3, 0x90, 0x2f, 0x34, 0x57, 0xd7, 0x6a, 0x5c, 0x29, 0x47, 0x5c,
	0xb3, 0x85, 0x16, 0x8a, 0x97, 0x15, 0x1b, 0xeb, 0x99, 0x08, 0xe5, 0xf0, 0xab, 0x9a, 0x89, 0xb0,
	0x24, 0x95, 0xd0, 0x82, 0xa6, 0x77, 0x3c, 0xdf, 0x23, 0xd9, 0x80, 0x8d, 0x75, 0x4b, 0x84, 0xee,
	0x5c, 0xab, 0x98, 0x16, 0x49, 0x4a, 0xc7, 0x92, 0xdb, 0xd8, 0xc1, 0x85, 0xe3, 0x9b, 0x5c, 0x69,
	0x67, 0x96, 0xea, 0x22, 0x8a, 0xd8, 0x7c, 0xd4, 0x8b, 0x25, 0x0f, 0xb6, 0x0e, 0xb5, 0xc9, 0x91,
	0x64, 0xf1, 0x4c, 0xb0, 0x91, 0x7d, 0xe0, 0xe0, 0x42, 0x36, 0xf8, 0x69, 0xf3, 0x97, 0x24, 0xe3,
	0x31, 0x35, 0xfd, 0x1e, 0xa1, 0x17, 0x24, 0xad, 0x27, 0x11, 0x5f, 0x68, 0x16, 0xc9, 0xed, 0xe6,
	0x54, 0xf0, 0x0b, 0xf2, 0x57, 0x24, 0xdb, 0x7d, 0xe4, 0x5c, 0xfe, 0xcb, 0x2e, 0x6a, 0x92, 0xf9,
	0x73, 0x09, 0xb5, 0xc9, 0x69, 0xbd, 0xed, 0x79, 0x55, 0xbf, 0x31, 0xe8, 0x3d, 0x74, 0xdc, 0xc1,
	0xbd, 0xdf, 0xf4, 0xdb, 0x7d, 0xdf, 0x42, 0xf4, 0x9c, 0xe4, 0xf6, 0x92, 0x6a, 0xa3, 0x31, 0xa8,
	0xb5, 0xda, 0xf5, 0xa6, 0x85, 0x69, 0x8e, 0x9c, 0xec, 0x65, 0x5e, 0x35, 0x68, 0x5a, 0x89, 0x43,
	0xcf, 0x08, 0xdd, 0xe3, 0xdd, 0xbe, 0xeb, 0x76, 0xac, 0x77, 0xa7, 0x76, 0xb7, 0x5c, 0x03, 0x5a,
	0xad, 0x01, 0x6d, 0xd6, 0x80, 0x9f, 0x0c, 0xe0, 0x17, 0x03, 0xf8, 0xd5, 0x00, 0x5e, 0x1a, 0xc0,
	0x6f, 0x06, 0xf0, 0x87, 0x01, 0xb4, 0x31, 0x80, 0x9f, 0x13, 0x40, 0xcb, 0x04, 0xd0, 0x2a, 0x01,
	0x34, 0x3c, 0xdc, 0xbe, 0xfb, 0xf6, 0x33, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x11, 0xc6, 0xbf, 0xa3,
	0x01, 0x00, 0x00,
}

func (x CommandType) String() string {
	s, ok := CommandType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *RaftLogEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RaftLogEntry)
	if !ok {
		that2, ok := that.(RaftLogEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	return true
}
func (this *MarkCommand) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MarkCommand)
	if !ok {
		that2, ok := that.(MarkCommand)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	return true
}
func (this *SweepCommand) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SweepCommand)
	if !ok {
		that2, ok := that.(SweepCommand)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	return true
}
func (this *RaftLogEntry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&raftlogpb.RaftLogEntry{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MarkCommand) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&raftlogpb.MarkCommand{")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SweepCommand) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&raftlogpb.SweepCommand{")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRaflog(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RaftLogEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftLogEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftLogEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintRaflog(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintRaflog(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MarkCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarkCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarkCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintRaflog(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SweepCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SweepCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SweepCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintRaflog(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRaflog(dAtA []byte, offset int, v uint64) int {
	offset -= sovRaflog(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RaftLogEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovRaflog(uint64(m.Type))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovRaflog(uint64(l))
	}
	return n
}

func (m *MarkCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovRaflog(uint64(m.Timestamp))
	}
	return n
}

func (m *SweepCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovRaflog(uint64(m.Timestamp))
	}
	return n
}

func sovRaflog(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRaflog(x uint64) (n int) {
	return sovRaflog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RaftLogEntry) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RaftLogEntry{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MarkCommand) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MarkCommand{`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SweepCommand) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SweepCommand{`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRaflog(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RaftLogEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaflog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftLogEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftLogEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaflog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= CommandType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaflog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaflog
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRaflog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaflog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaflog
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaflog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarkCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaflog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarkCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarkCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaflog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaflog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaflog
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaflog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SweepCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaflog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SweepCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SweepCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaflog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaflog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaflog
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaflog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaflog(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaflog
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaflog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaflog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRaflog
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthRaflog
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRaflog
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRaflog(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthRaflog
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRaflog = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaflog   = fmt.Errorf("proto: integer overflow")
)
